#!/usr/bin/python

import os
import sys
import shlex
import subprocess
import re
import threading
import gtk
import pango
import urlparse, urllib
import time

# Magic make-things-work call -_-
gtk.gdk.threads_init()

DATADIR = "@prefix@/share/sharez/"
# when running local
if ".in" in sys.argv[0]:
    DATADIR = "."	

def get_mount(path):
    path = os.path.abspath(path)
    while path != os.path.sep:
        if os.path.ismount(path):
            return path
        path = os.path.abspath(os.path.join(path, os.pardir))
    return path

def get_dev(mount):
    cmd = "mount"
    cmd = shlex.split(cmd)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    data = proc.communicate()[0]
    exp = re.compile("(.*)[\s]+on[\s]+([^\s]+)[\s]+.*")
    for dev, mp in exp.findall(data):
        if os.path.samefile(mount, mp):
            # remove partition number
            # e.g. /dev/sdb1 -> /dev/sdb
            exp = re.compile("/.*/[^\d]+([\d]*)")
            num = exp.findall(dev)[0]
            dev = dev.replace(num, "")
            return dev
    return None

class RsyncParser:
    _proc = None
    _job = None
    _file = ""
    _speed = 0
    _list = None
    _size = -1
    _transfered = 0

    def __init__(self, proc, job, file_list=None, size=-1):
        self._proc = proc
        self._job = job
        if file_list:
            self._list = file_list
        else:
            self._list = []
        self._size = size

    def _parse(self, data):
        if data in self._list:
            self._job.update_file(os.path.basename(data))
            self._file = data
            return

        exp = "[\s]+([\d]+)[\s]+([\d]{1,3})%[\s]*([\d]{1,3}\.\d\d../s)\s.*"
        exp = re.compile(exp)
        out = exp.findall(data)
        if out:
            fsize, prog, speed = out[0]
            prog = int(prog)
            fsize = int(fsize)
            total = int(float(self._transfered + fsize) / self._size * 100)
            if prog > 100 or total > 100:
                print "WARNING: Failed to parse %s" % data
            self._job.update_file_progress(prog)
            self._job.update_progress(total)
            self._job.update_speed(speed)
            if prog == 100:
                self._transfered += fsize

    def start(self):
        buff = ""
        out = self._proc.stdout.read(1)
        while out:
            if out == '\r' or out == '\n':
                self._parse(buff)
                buff = ""
            else:
                buff += out
            out = self._proc.stdout.read(1)

class Job(threading.Thread):
    _src = None
    _dst = None
    _manager = None
    _proc = None
    _killed = False

    def __init__(self, src, dst):
        self._src = src
        self._dst = dst

        self.deamon = True
        threading.Thread.__init__(self)

    def get_src(self):
        return self._src

    def get_dst(self):
        return self._dst

    def dry_run(self):
        cmd = "rsync -aP --dry-run \"%s\" \"%s\"" % (self._src, self._dst)
        cmd = shlex.split(cmd)
        self._proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        out = self._proc.communicate()[0]
        exp = "total size is ([\d]+)\s"
        exp = re.compile(exp)
        size = exp.findall(out)[0]
        size = int(size)
        file_list = out.split("\n")
        file_list = [f.strip() for f in file_list if f != '']
        # no folders
        file_list = [f for f in file_list if f[-1] != "/"]
        # no msgs
        file_list = [f for f in file_list if not f.startswith("sent ")]
        file_list = [f for f in file_list if not f.startswith("total size is")]
        file_list = [f for f in file_list if not f.startswith("sending incremental file list")]
        return size, file_list
    
    def run(self):
        size, file_list = self.dry_run()
        cmd = "rsync -aP \"%s\" \"%s\"" % (self._src, self._dst)
        cmd = shlex.split(cmd)
        self._proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        parser = RsyncParser(self._proc, self, file_list, size)
        parser.start()
        if not self._killed:
            self._manager.job_finished(self)

    def cancel(self):
        self._killed = True
        self._proc.kill()

    def set_manager(self, manager):
        self._manager = manager

    def update_progress(self, percent):
        if self._manager:
            self._manager.update_progress(self, percent)

    def update_file(self, f):
        if self._manager:
            self._manager.update_file(self, f)

    def update_speed(self, speed):
        if self._manager:
            self._manager.update_speed(self, speed)

    def update_file_progress(self, percent):
        if self._manager:
            self._manager.update_file_progress(self, percent)

class Manager:
    _jobs = None
    _current = None
    _boss = None
    _min = 1
    _max = 3

    def __init__(self, boss):
        self._jobs = []
        self._current = []
        self._boss = boss

    def cancel(self):
        for job in self._current:
            job.cancel()
        
        self._current = []
        self._jobs = []

    def swap(self, j, k):
        if j in self._current\
        or k in self._current:
            return False

        a = self._jobs.index(j)
        b = self._jobs.index(k)
        self._jobs.remove(k)
        self._jobs.remove(j)
        if k < j:
            self._jobs.insert(a, k)
            self._jobs.insert(b, j)
        else:
            self._jobs.insert(b, j)
            self._jobs.insert(a, k)

        return True

    def update(self):
        if not self._jobs:
            return

        while len(self._current) < self._max:
            nxt = self._select_job()
            if not nxt:
                break
            self.start_job(nxt)

        if  len(self._current) < self._min:
            self._next_job()

    def add_job(self, job):
        self._jobs.append(job)
        job.set_manager(self)
        self.update()

    def remove_job(self, job, update=True):
        if job in self._current:
            job.cancel()
            self._current.remove(job)
        else:
            self._jobs.remove(job)
        if update:
            self.update()

    def _get_devs(self, job):
        src = job.get_src()
        dst = job.get_dst()

        mount = get_mount(src)
        dev1 = get_dev(mount)

        mount = get_mount(dst)
        dev2 = get_dev(mount)

        return dev1, dev2

    def _select_job(self):
        devices = []
        for job in self._current:
            devs = self._get_devs(job)
            devices += list(devs)

        nxt = None
        # pick a job that doesn't use the active drives
        if devices:
            for job in self._jobs:
                devs = self._get_devs(job)
                inuse = False
                for d in devs:
                    if d in devices:
                        inuse = True
                        break
                if not inuse:
                    nxt = job
                    break
        return nxt

    def _next_job(self):
        nxt = self._jobs[0]
        self.start_job(nxt)

    def start_job(self, job):
        self._jobs.remove(job)
        self._current.append(job)
        job.start()

    def job_finished(self, job):
        if not job._killed:
            self._boss.job_finished(job)
            self._current.remove(job)
        self.update()

    def update_progress(self, job, percent):
        self._boss.update_progress(job, percent)

    def update_file_progress(self, job, percent):
        self._boss.update_file_progress(job, percent)

    def update_file(self, job, f):
        self._boss.update_file(job, f)

    def update_speed(self, job, speed):
        self._boss.update_speed(job, speed)

class DestList(gtk.TreeView):
    _store = None
    _dst = None
    _handler = None

    def __init__(self, dst, handler):
        gtk.TreeView.__init__(self)
        
        self._store = gtk.ListStore(str)
        self._dst = dst
        self._handler = handler

        cell = gtk.CellRendererText()
        col = gtk.TreeViewColumn("", cell, text=0)
        self.append_column(col)
        self.set_model(self._store)
        self.set_headers_visible(False)

        sel = self.get_selection()
        sel.set_mode(gtk.SELECTION_MULTIPLE)

        self.enable_model_drag_dest([('text/plain', 0, 0)], gtk.gdk.ACTION_DEFAULT)
        self.connect('drag-data-received', self._drop)
        self.connect('key-release-event', self._key)

    def get_dest(self):
        return self._dst

    def get_src(self):
        it = self._store.get_iter_first()
        src = []
        while it:
            val = self._store.get_value(it, 0)
            src.append(val)
            it = self._store.iter_next(it)
        return src

    def remove_row(self, src):
        it = self._store.get_iter_first()
        while it:
            val = self._store.get_value(it, 0)
            if val == src:
                self._store.remove(it)
                return True
            it = self._store.iter_next(it)
        return False

    def _delete_current_row(self):
        model, rows = self.get_selection().get_selected_rows()
        iters = [model.get_iter(r) for r in rows]
        removed = []
        for it in iters:
            src = model.get(it, 0)[0]
            removed.append(src)
            model.remove(it)
        self._handler.removed(self._dst, removed)

    def _key(self, widget, event):
        key = gtk.gdk.keyval_name(event.keyval)
        if key == "Delete":
            self._delete_current_row()

    def _drop(self, widget, context, x, y, sel, info, timestamp):
        data = sel.data.strip().replace("\r", "").split("\n")
        valid = False
        for url in data:
            path = urllib.unquote(urlparse.urlparse(url).path)
            if os.path.exists(path):
                self._handler.dropped(self._dst, path)
                self._store.append((path,))
                valid = True
        context.finish(valid, False, timestamp)

class DropLocation(gtk.Label):
    _handler = None

    def __init__(self, handler):
        gtk.Label.__init__(self)
        self.set_angle(90)
        self.set_size_request(30, -1)

        self._handler = handler

        self.set_text("Drop here.")
        self.drag_dest_set(gtk.DEST_DEFAULT_ALL, [], gtk.gdk.ACTION_DEFAULT | gtk.gdk.ACTION_COPY)
        self.drag_dest_add_uri_targets()
        self.drag_dest_add_text_targets()
        self.connect('drag-data-received', self._drop)

    def _drop(self, widget, context, x, y, sel, info, timestamp):
        data = sel.data.strip().replace("\r", "").split("\n")
        valid = False
        for url in data:
            path = urllib.unquote(urlparse.urlparse(url).path)
            if os.path.exists(path)\
            and os.path.isdir(path):
                self._handler.new_dest(path)
                valid = True
        context.finish(valid, False, timestamp)

class MainWin:
    _builder = None
    _store = None
    _tree = None
    _box = None
    _button = None
    _lists = None
    _jobs = None
    _manager = None
    _is_running = False

    def __init__(self):
        self._builder = gtk.Builder()
        self._builder.add_from_file(os.path.join(DATADIR, "sharez.gtk"))
        self._builder.connect_signals(self)
        
        self._lists = {}
        self._jobs = []
        self._manager = Manager(self)

        self._button = self._builder.get_object("cancelButton")

        win = self._builder.get_object("mainWin")
        win.connect('destroy', self._close)
        win.set_size_request(1000, 600)

        self._box = self._builder.get_object("destBox")
        drop = DropLocation(self)
        frame = gtk.Frame()
        frame.add(drop)
        self._box.pack_start(frame, False, True)

        self._store = self._builder.get_object("procStore")
        self._tree = self._builder.get_object("procList")
        win.show_all()

    def _iter_prev(self, model, it):
        src, dst = model.get(it, 0, 1)
        before = model.get_iter_first()
        while before:
            nxt = model.iter_next(before)
            s, d = model.get(nxt, 0, 1)
            if s == src and d == dst:
                return before
            before = nxt
        return None

    def _up(self, widget):
        sel = self._tree.get_selection()
        model, it = sel.get_selected()
        before = self._iter_prev(model, it)
        j1 = self._get_job(model, it)
        j2 = self._get_job(model, before)
        if self._manager.swap(j1, j2):
            model.swap(it, before)

    def _down(self, widget):
        sel = self._tree.get_selection()
        model, it = sel.get_selected()
        nxt = model.iter_next(it)
        if not nxt:
            return
        j1 = self._get_job(model, it)
        j2 = self._get_job(model, nxt)
        if self._manager.swap(j1, j2):
            model.swap(it, nxt)

    def _start_job(self, widget):
        sel = self._tree.get_selection()
        model, it = sel.get_selected()
        job = self._get_job(model, it)
        self._manager.start_job(job)

    def removed(self, dst, entries):
        if not self._is_running:
            return
        for src in entries:
            for job in self._jobs:
                if  job.get_src() == src\
                and job.get_dst() == dst:
                    self._remove_job(job)
                    self._manager.remove_job(job, update=False)
                    break
        self._manager.update()

    def dropped(self, dst, src):
        if self._is_running:
            job = Job(src, dst)
            self._add_job(job)

    def _dst_label(self, path):
        box = None
        dev = ""
        if path.startswith("/media/")\
        or path.startswith("/home/"):
            dev = [x for x in path.split("/") if x != ''][1]

        if dev:
            dev = "<b>%s</b>" % dev
            label = gtk.Label()
            label.set_markup(dev)
            box = gtk.VBox()
            box.set_spacing(2)
            box.pack_start(label, False, False)

        label = gtk.Label(path)
        label.set_single_line_mode(False)
        label.set_line_wrap(True)
        label.set_ellipsize(pango.ELLIPSIZE_START)
        if box:
            box.pack_start(label, True, True)
            return box
        return label

    def _remove_dest(self, widget, dbox, dst):
        if self._is_running:
            for job in list(self._jobs):
                if job.get_dst() == dst:
                    self._remove_job(job)
                    self._manager.remove_job(job, update=False)
        self._manager.update()
        dbox.hide()
        self._box.remove(dbox)
        dbox.destroy()

    def new_dest(self, path):
        box = gtk.VBox()
        box.set_spacing(6)
        box.set_border_width(6)
        box.pack_start(self._dst_label(path), False, False)
        l = DestList(path, self)
        box.pack_start(l)
        self._lists[path] = l
        button = gtk.Button(stock=gtk.STOCK_REMOVE)
        button.connect('clicked', self._remove_dest, box, path)
        box.pack_start(button, False, False)
        self._box.pack_start(box)
        self._box.show_all()

    def _close(self, widget):
        self._cancel(None)
        gtk.main_quit()

    def _cancel(self, widget):
        self._manager.cancel()
        self._jobs = []
        self._store.clear()
        self._button.set_sensitive(False)
        self._is_running = False

    def _add_job(self, job):
        src = job.get_src()
        dst = job.get_dst()
        self._store.append((src, dst, "", 0, 0, ""))
        self._jobs.append(job)
        self._manager.add_job(job)

    def _remove_job(self, job):
        it = self._get_iter(job)
        self._store.remove(it)
        self._jobs.remove(job)

        dst = job.get_dst()
        src = job.get_src()
        l = self._lists[dst]
        l.remove_row(src)

        if len(self._jobs) == 0:
            self._button.set_sensitive(False)
            self._is_running = False

    def _get_job(self, model, it):
        src, dst = model.get(it, 0, 1)
        for j in self._jobs:
            if  j.get_src() == src\
            and j.get_dst() == dst:
                return j
        return None

    def _get_iter(self, job):
        it = self._store.get_iter_first()
        src = job.get_src()
        dst = job.get_dst()
        while it:
            rsrc, rdst = self._store.get(it, 0, 1)
            if src == rsrc and dst == rdst:
                return it
            it = self._store.iter_next(it)

        return None

    def job_finished(self, job):
        self._remove_job(job)

    def update_file(self, job, f):
        self._update(job, 2, f)

    def update_file_progress(self, job, prog):
        self._update(job, 3, prog)

    def update_speed(self, job, speed):
        self._update(job, 5, speed)

    def update_progress(self, job, prog):
        self._update(job, 4, prog)

    def _update(self, job, col, val):
        if job not in self._jobs:
            print "WARNING: Update from removed job: %s" % job
            return
        it = self._get_iter(job)
        self._store.set(it, col, val)

    def _run(self, widget):
        if self._is_running:
            return

        for dst in self._lists:
            l = self._lists[dst]
            for src in l.get_src():
                j = Job(src, dst)
                self._add_job(j)

        self._is_running = True
        self._button.set_sensitive(True)

win = MainWin()
gtk.main()
